<?xml version="1.0"?>
<launch>
  <!-- Parameter files -->
  <arg
    name="use_empty_dynamic_object_publisher"
    default="false"
    description="if use_empty_dynamic_object_publisher:=true, /perception/object_recognition/objects topic has an empty DynamicObjectArray"
  />
  <arg name="use_pointcloud_container" default="true" description="launch pointcloud container"/>
  <arg name="pointcloud_container_name" default="pointcloud_container"/>
  <arg name="fusion_config_file" default="$(find-pkg-share probabilistic_occupancy_grid_map)/config/grid_map_fusion.param.yaml"/>
  <arg name="ogm_config_file" default="$(find-pkg-share probabilistic_occupancy_grid_map)/config/pointcloud_based_occupancy_grid_map_for_fusion.param.yaml"/>

  <!-- occupancy grid map fusion -->
  <include file="$(find-pkg-share probabilistic_occupancy_grid_map)/launch/grid_map_fusion_with_synchronized_pointclouds.launch.py">
    <arg name="output" value="/perception/occupancy_grid_map/fusion/map"/>
    <arg name="use_intra_process" value="true"/>
    <arg name="use_multithread" value="true"/>
    <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
    <arg name="container_name" value="$(var pointcloud_container_name)"/>
    <arg name="method" value="pointcloud_based_occupancy_grid_map"/>
    <arg name="fusion_config_file" value="$(var fusion_config_file)"/>
    <arg name="ogm_config_file" value="$(var ogm_config_file)"/>
  </include>

  <!-- occupancy grid map in each sensor module -->
  <!-- <group>
    <push-ros-namespace namespace="occupancy_grid_map_top"/>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/occupancy_grid_map/probabilistic_occupancy_grid_map.launch.xml">
      <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/single_frame/pointcloud_raw"/>
      <arg name="input/raw_pointcloud" value="/sensing/lidar/top/outlier_filtered/pointcloud_synchronized"/>
      <arg name="output" value="/perception/occupancy_grid_map/top_lidar/map"/>
      <arg name="map_frame" value="base_link"/>
      <arg name="scan_origin" value="velodyne_top"/>
      <arg name="use_intra_process" value="true"/>
      <arg name="use_multithread" value="true"/>
      <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
      <arg name="container_name" value="$(var pointcloud_container_name)"/>
      <arg name="method" value="pointcloud_based_occupancy_grid_map"/>
      <arg name="param_file" value="$(find-pkg-share probabilistic_occupancy_grid_map)/config/pointcloud_based_occupancy_grid_map_fusion.param.yaml"/>
    </include>
  </group>
  <group>
    <push-ros-namespace namespace="occupancy_grid_map_left"/>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/occupancy_grid_map/probabilistic_occupancy_grid_map.launch.xml">
      <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/single_frame/pointcloud_raw"/>
      <arg name="input/raw_pointcloud" value="/sensing/lidar/left/outlier_filtered/pointcloud_synchronized"/>
      <arg name="output" value="/perception/occupancy_grid_map/left_lidar/map"/>
      <arg name="map_frame" value="base_link"/>
      <arg name="scan_origin" value="velodyne_left"/>
      <arg name="use_intra_process" value="true"/>
      <arg name="use_multithread" value="true"/>
      <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
      <arg name="container_name" value="$(var pointcloud_container_name)"/>
      <arg name="method" value="pointcloud_based_occupancy_grid_map"/>
      <arg name="param_file" value="$(find-pkg-share probabilistic_occupancy_grid_map)/config/pointcloud_based_occupancy_grid_map_fusion.param.yaml"/>
    </include>
  </group>
  <group>
    <push-ros-namespace namespace="occupancy_grid_map_right"/>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/occupancy_grid_map/probabilistic_occupancy_grid_map.launch.xml">
      <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/single_frame/pointcloud_raw"/>
      <arg name="input/raw_pointcloud" value="/sensing/lidar/right/outlier_filtered/pointcloud_synchronized"/>
      <arg name="output" value="/perception/occupancy_grid_map/right_lidar/map"/>
      <arg name="map_frame" value="base_link"/>
      <arg name="scan_origin" value="velodyne_right"/>
      <arg name="use_intra_process" value="true"/>
      <arg name="use_multithread" value="true"/>
      <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
      <arg name="container_name" value="$(var pointcloud_container_name)"/>
      <arg name="method" value="pointcloud_based_occupancy_grid_map"/>
      <arg name="param_file" value="$(find-pkg-share probabilistic_occupancy_grid_map)/config/pointcloud_based_occupancy_grid_map_fusion.param.yaml"/>
    </include>
  </group> -->

  <!-- occupancy grid map fusion module -->
  <!-- <group>
    <push-ros-namespace namespace="occupancy_grid_map_fusion"/>
    <node name="grid_map_fusion_node" exec="grid_map_fusion_node" pkg="probabilistic_occupancy_grid_map" output="screen">
      <remap from="~/output/occupancy_grid_map" to="/perception/occupancy_grid_map/fusion/map"/>
      <param name="fusion_method" value="log-odds"/>
      <param name="input_topic_weights" value="[0.9, 0.6, 0.6]"/>
    </node>
  </group> -->
</launch>
